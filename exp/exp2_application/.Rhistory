xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair.csv"), collapse="/"))
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
setwd("/Users/Qishuo/Code/Optimal_Sampling/exp/exp2_application")
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$selection_result
detect_result = test_result$detection_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$plan_result
detect_result = test_result$analysis_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
write.csv(final_results, paste(c(current_dir, "final_results.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - vanilla Bonferroni method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_vanilla_Bonferroni_test.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair.csv"), collapse="/"))
# Optimal Sampling
# Application - vanilla Bonferroni method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_vanilla_Bonferroni_test.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
# test treatment effect by the vanilla Bonferroni
Bonferroni_result = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(Bonferroni_result) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = Bonferroni_test(Gamma, data_pair)
Bonferroni_result[which(Gamma_vec == Gamma), ] = test_result
}
write.csv(Bonferroni_result, paste(c(current_dir, "final_results_vanilla_Bonferroni.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application on NHANES 2017-2018 dataset
# full matching on cleaned dataset
# Load necessary libraries
library(foreign)
library(MatchIt)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
# set seed for the simulation
set.seed(2024)
# import paired data
data_full_cleaned = read.csv(paste(c(current_dir, "data_full_cleaned.csv"), collapse="/"))
# full matching on pretreatment variables
full_match <- matchit(TREAT ~ DMDHREDZ + RIAGENDR + RIDRETH1 + INDFMPIR + DMDHHSIZ + RIDAGEYR + HOD050,
data = data_full_cleaned, method = "full")
# convert matching results into pair-matched-difference dataset
for (class in 1:length(full_match$subclass)) {
class_indices = which(full_match$subclass == class)
treat_indices = c()
control_indices = c()
for (index in class_indices) {
if (data_full_cleaned$TREAT[index] == 1){
treat_indices = append(treat_indices, index)
}else {
control_indices = append(control_indices, index)
}
}
outcome_names = colnames(data_full_cleaned)[-c(1:9)]
data_pair_subclass_diff = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
data_pair_subclass_control = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
data_pair_subclass_treat = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
k = 1
for (i in treat_indices) {
for (j in control_indices) {
data_pair_subclass_diff[k, ] = data_full_cleaned[i, -c(1:9)]-data_full_cleaned[j, -c(1:9)]
data_pair_subclass_control[k, ] = data_full_cleaned[j, -c(1:9)]
data_pair_subclass_diff[k, ] = data_full_cleaned[i, -c(1:9)]
k = k+1
}
}
if (class == 1) {
data_pair_diff = data_pair_subclass_diff
data_pair_control = data_pair_subclass_control
data_pair_treat = data_pair_subclass_treat
} else {
data_pair_diff = rbind(data_pair_diff, data_pair_subclass_diff)
data_pair_control = rbind(data_pair_control, data_pair_subclass_control)
data_pair_treat = rbind(data_pair_treat, data_pair_subclass_treat)
}
}
colnames(data_pair_diff) = outcome_names
colnames(data_pair_control) = outcome_names
colnames(data_pair_treat) = outcome_names
# save pair-matched-difference, control, and treat datasets
write.csv(data_pair_diff, paste(c(current_dir, "data_pair_diff.csv"), collapse="/"), row.names = FALSE)
write.csv(data_pair_control, paste(c(current_dir, "data_pair_control.csv"), collapse="/"), row.names = FALSE)
write.csv(data_pair_treat, paste(c(current_dir, "data_pair_treat.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application on NHANES 2017-2018 dataset
# full matching on cleaned dataset
# Load necessary libraries
library(foreign)
library(MatchIt)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
# set seed for the simulation
set.seed(2024)
# import paired data
data_full_cleaned = read.csv(paste(c(current_dir, "data_full_cleaned.csv"), collapse="/"))
# full matching on pretreatment variables
full_match <- matchit(TREAT ~ DMDHREDZ + RIAGENDR + RIDRETH1 + INDFMPIR + DMDHHSIZ + RIDAGEYR + HOD050,
data = data_full_cleaned, method = "full")
# convert matching results into pair-matched-difference dataset
for (class in 1:length(full_match$subclass)) {
class_indices = which(full_match$subclass == class)
treat_indices = c()
control_indices = c()
for (index in class_indices) {
if (data_full_cleaned$TREAT[index] == 1){
treat_indices = append(treat_indices, index)
}else {
control_indices = append(control_indices, index)
}
}
outcome_names = colnames(data_full_cleaned)[-c(1:9)]
data_pair_subclass = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
k = 1
for (i in treat_indices) {
for (j in control_indices) {
data_pair_subclass[k, ] = data_full_cleaned[i, -c(1:9)]-data_full_cleaned[j, -c(1:9)]
k = k+1
}
}
if (class == 1) {
data_pair = data_pair_subclass
} else {
data_pair = rbind(data_pair, data_pair_subclass)
}
}
colnames(data_pair) = outcome_names
# save pair-matched-difference dataset
write.csv(data_pair, paste(c(current_dir, "data_pair.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application on NHANES 2017-2018 dataset
# full matching on cleaned dataset
# Load necessary libraries
library(foreign)
library(MatchIt)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
# set seed for the simulation
set.seed(2024)
# import paired data
data_full_cleaned = read.csv(paste(c(current_dir, "data_full_cleaned.csv"), collapse="/"))
# full matching on pretreatment variables
full_match <- matchit(TREAT ~ DMDHREDZ + RIAGENDR + RIDRETH1 + INDFMPIR + DMDHHSIZ + RIDAGEYR + HOD050,
data = data_full_cleaned, method = "full")
# convert matching results into pair-matched-difference dataset
for (class in 1:length(full_match$subclass)) {
class_indices = which(full_match$subclass == class)
treat_indices = c()
control_indices = c()
for (index in class_indices) {
if (data_full_cleaned$TREAT[index] == 1){
treat_indices = append(treat_indices, index)
}else {
control_indices = append(control_indices, index)
}
}
outcome_names = colnames(data_full_cleaned)[-c(1:9)]
data_pair_subclass_diff = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
data_pair_subclass_control = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
data_pair_subclass_treat = data.frame((matrix(ncol = length(outcome_names),
nrow = length(treat_indices) * length(control_indices) )))
k = 1
for (i in treat_indices) {
for (j in control_indices) {
data_pair_subclass_diff[k, ] = data_full_cleaned[i, -c(1:9)]-data_full_cleaned[j, -c(1:9)]
data_pair_subclass_control[k, ] = data_full_cleaned[j, -c(1:9)]
data_pair_subclass_treat[k, ] = data_full_cleaned[i, -c(1:9)]
k = k+1
}
}
if (class == 1) {
data_pair_diff = data_pair_subclass_diff
data_pair_control = data_pair_subclass_control
data_pair_treat = data_pair_subclass_treat
} else {
data_pair_diff = rbind(data_pair_diff, data_pair_subclass_diff)
data_pair_control = rbind(data_pair_control, data_pair_subclass_control)
data_pair_treat = rbind(data_pair_treat, data_pair_subclass_treat)
}
}
colnames(data_pair_diff) = outcome_names
colnames(data_pair_control) = outcome_names
colnames(data_pair_treat) = outcome_names
# save pair-matched-difference, control, and treat datasets
write.csv(data_pair_diff, paste(c(current_dir, "data_pair_diff.csv"), collapse="/"), row.names = FALSE)
write.csv(data_pair_control, paste(c(current_dir, "data_pair_control.csv"), collapse="/"), row.names = FALSE)
write.csv(data_pair_treat, paste(c(current_dir, "data_pair_treat.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$plan_result
detect_result = test_result$analysis_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
write.csv(final_results, paste(c(current_dir, "final_results.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - vanilla Bonferroni method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_vanilla_Bonferroni_test.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
# test treatment effect by the vanilla Bonferroni
Bonferroni_result = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(Bonferroni_result) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = Bonferroni_test(Gamma, data_pair)
Bonferroni_result[which(Gamma_vec == Gamma), ] = test_result
}
write.csv(Bonferroni_result, paste(c(current_dir, "final_results_vanilla_Bonferroni.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.9 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$plan_result
detect_result = test_result$analysis_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
write.csv(final_results, paste(c(current_dir, "final_results.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - Solve Optimal Split Fraction (generate 10% outcomes affected in plasmode dataset)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_optimal_fraction.R"), collapse="/"))
# set parameters
sim_num = 1000 # simulation times
effect_ratio = 0.1
effect_size_lower = 0.05
effect_size_upper = 0.2
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
plasmode_dir = paste(c(current_dir, "data_plasmode", "data_plasmode_0_1"), collapse="/")
test_result_dir = paste(c(current_dir, "test_results", "test_results_plasmode_0_1"), collapse="/")
final_result_dir = current_dir
result_file_name = paste(c(paste(c("final_result", "method", method, "plasmode_ratio_0_1"), collapse="_"), "csv"), collapse=".")
# solve optimal sample split fraction
data_control = read.csv(paste(c(current_dir, "data_pair_control.csv"), collapse="/"))
result_mat = optimal_fraction(data_control, sim_num, effect_ratio, effect_size_lower, effect_size_upper, Gamma_vec, xi_vec, method = "rank", plasmode_dir, test_result_dir=NULL, final_result_dir, result_file_name)
select_result
# Optimal Sampling
# Application - Solve Optimal Split Fraction (generate 10% outcomes affected in plasmode dataset)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_optimal_fraction.R"), collapse="/"))
# set parameters
sim_num = 10 #00 # simulation times
effect_ratio = 0.1
effect_size_lower = 0.05
effect_size_upper = 0.2
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
plasmode_dir = paste(c(current_dir, "data_plasmode", "data_plasmode_0_1"), collapse="/")
test_result_dir = paste(c(current_dir, "test_results", "test_results_plasmode_0_1"), collapse="/")
final_result_dir = current_dir
result_file_name = paste(c(paste(c("final_result", "method", method, "plasmode_ratio_0_1"), collapse="_"), "csv"), collapse=".")
# solve optimal sample split fraction
data_control = read.csv(paste(c(current_dir, "data_pair_control.csv"), collapse="/"))
result_mat = optimal_fraction(data_control, sim_num, effect_ratio, effect_size_lower, effect_size_upper, Gamma_vec, xi_vec, method = "rank", plasmode_dir, test_result_dir=NULL, final_result_dir, result_file_name)
# Optimal Sampling
# Application - Solve Optimal Split Fraction (generate 10% outcomes affected in plasmode dataset)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_optimal_fraction.R"), collapse="/"))
# set parameters
sim_num = 3 #1000 # simulation times
effect_ratio = 0.1
effect_size_lower = 0.05
effect_size_upper = 0.2
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
plasmode_dir = paste(c(current_dir, "data_plasmode", "data_plasmode_0_1"), collapse="/")
test_result_dir = paste(c(current_dir, "test_results", "test_results_plasmode_0_1"), collapse="/")
final_result_dir = current_dir
result_file_name = paste(c(paste(c("final_result", "method", method, "plasmode_ratio_0_1"), collapse="_"), "csv"), collapse=".")
# solve optimal sample split fraction
data_control = read.csv(paste(c(current_dir, "data_pair_control.csv"), collapse="/"))
result_mat = optimal_fraction(data_control, sim_num, effect_ratio, effect_size_lower, effect_size_upper, Gamma_vec, xi_vec, method = "rank", plasmode_dir, test_result_dir=NULL, final_result_dir, result_file_name)
# Optimal Sampling
# Application - Solve Optimal Split Fraction (generate 10% outcomes affected in plasmode dataset)
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_optimal_fraction.R"), collapse="/"))
# set parameters
sim_num = 1 #1000 # simulation times
effect_ratio = 0.1
effect_size_lower = 0.05
effect_size_upper = 0.2
Gamma_vec = 1 #c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
plasmode_dir = paste(c(current_dir, "data_plasmode", "data_plasmode_0_1"), collapse="/")
test_result_dir = paste(c(current_dir, "test_results", "test_results_plasmode_0_1"), collapse="/")
final_result_dir = current_dir
result_file_name = paste(c(paste(c("final_result", "method", method, "plasmode_ratio_0_1"), collapse="_"), "csv"), collapse=".")
# solve optimal sample split fraction
data_control = read.csv(paste(c(current_dir, "data_pair_control.csv"), collapse="/"))
result_mat = optimal_fraction(data_control, sim_num, effect_ratio, effect_size_lower, effect_size_upper, Gamma_vec, xi_vec, method = "rank", plasmode_dir, test_result_dir=NULL, final_result_dir, result_file_name)
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.8 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$plan_result
detect_result = test_result$analysis_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
write.csv(final_results, paste(c(current_dir, "final_results.csv"), collapse="/"), row.names = FALSE)
# Optimal Sampling
# Application - final test for optimal sampling method
# set relative path
current_dir = getwd()
parent_dir = dirname(getwd())
parent_parent_dir = dirname(parent_dir)
# set seeds
set.seed(2024)
# import necessary sources
fun_dir = paste(c(parent_parent_dir, "fun"), collapse="/")
source(paste(c(fun_dir, "fun_two_stage_tests.R"), collapse="/"))
# input parameters
Gamma_vec = c(1, 1.25, 1.5, 1.75, 2) # different design sensitivity Gamma
xi_vec = seq(from = 0.02, to = 0.98, by = 0.02) # different analysis sample fraction
method = "rank"
optimal_fractions = 0.9 # need to set here
# import paired data
data_pair = read.csv(paste(c(current_dir, "data_pair_diff.csv"), collapse="/"))
final_results = matrix(0, nrow = length(Gamma_vec), ncol = ncol(data_pair))
colnames(final_results) = colnames(data_pair)
for (Gamma in Gamma_vec) {
test_result = treatment_detection(Gamma, xi=optimal_fractions[length(optimal_fractions)], V=data_pair, method)
select_result = test_result$plan_result
detect_result = test_result$analysis_result
final_results[which(Gamma_vec == Gamma), ] = detect_result
}
write.csv(final_results, paste(c(current_dir, "final_results.csv"), collapse="/"), row.names = FALSE)
